#include "AssetTracker.h"// Getting the library
// Extremely useful for saving data while developing close enough to have a
cable plugged in.
// can change this remotely using the Particle.function "tmode" defined in
setup()
int transmittingData = 1; // 1 will Particle.publish AND Serial.print, 0 will
just Serial.print
long lastPublish = 0; // Used to keep track of the last time we published data
int delayMinutes = 2; // 10+ recommended for long-time continuous
publishing!

const int BUZZER_PIN = D5;
AssetTracker t = AssetTracker();// Creating an AssetTracker named 't' for us
to reference
FuelGauge fuel; // A FuelGauge named 'fuel' for checking on the battery state
void setup() {// setup() and loop() are both required. setup() runs once when
the device starts
// and is used for registering functions and variables and initializing things
t.begin();// Sets up all the necessary AssetTracker bits
t.gpsOn();// Enable the GPS module. Defaults to off to save power.
// Takes 1.5s or so because of delays

Serial.begin(9600); // Opens up a Serial port so you can listen over USB
// These four functions are useful for remote diagnostics. Read more
below.
Particle.function("on-off", buzzerControl);
Particle.function("tmode", transmitMode);
Particle.function("batt", batteryStatus);
Particle.function("gps", gpsPublish);
}
void loop() {// loop() runs continuously
t.updateGPS();// You'll need to run this every loop to capture the GPS
output
// if the current time - the last time we published is greater than your set
delay...
if (millis()-lastPublish > delayMinutes*60*1000) {
lastPublish = millis(); // Remember when we published

//String pubAccel = String::format("%d,%d,%d", t.readX(), t.readY(),
t.readZ());
//Serial.println(pubAccel);
//Particle.publish("A", pubAccel, 60, PRIVATE);
// Dumps the full NMEA sentence to serial in case you're curious
Serial.println(t.preNMEA());
// GPS requires a "fix" on the satellites to give good data,
if (t.gpsFix()) { // so we should only publish data if there's a fix
// Only publish if we're in transmittingData mode 1;
if (transmittingData) {
// Short publish names save data!

Particle.publish("Location", t.readLatLon(), 60, PRIVATE);
}
Serial.println(t.readLatLon());// but always report the data over serial
for local development
}
}
}
int buzzerControl(String controlCommand) {
String convertedCommand = controlCommand.toUpperCase();
if(convertedCommand == "ON") {
digitalWrite(BUZZER_PIN, HIGH);
Particle.publish("buzzer_status", "ON");
return(1);
} else if(convertedCommand == "OFF") {
digitalWrite(BUZZER_PIN, LOW);
Particle.publish("buzzer_status", "OFF");
return(0);
} else {
return(-1);
}
}
// Allows you to remotely change whether a device is publishing to the cloud
// or is only reporting data over Serial. Saves data when using only Serial!
// Change the default at the top of the code.
int transmitMode(String command) {
transmittingData = atoi(command);
return 1;
}
// Actively ask for a GPS reading if you're impatient. Only publishes if there's
a GPS fix, otherwise returns '0'
int gpsPublish(String command) {
if (t.gpsFix()) {
Particle.publish("G", t.readLatLon(), 60, PRIVATE);
// uncomment next line if you want a manual publish to reset delay
counter
// lastPublish = millis();
return 1;
} else {
return 0;
}
}
// Triggers a publish with the info (so subscribe or watch the dashboard)
// and also returns a '1' if there's >10% battery left and a '0' if below
int batteryStatus(String command){
// Publish the battery voltage and percentage of battery remaining
// the String::format("%f.2") part gives us a string to publish,
// but with only 2 decimal points to save space
Particle.publish("B",
"v:" + String::format("%.2f",fuel.getVCell()) +
",c:" + String::format("%.2f",fuel.getSoC()),
60, PRIVATE
);
if (fuel.getSoC()>10){ return 1;} // if there's more than 10% of the battery
left, then return 1
else { return 0;} // if you're running out of battery, return 0
}
